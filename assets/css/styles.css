/* CSS RESET */
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
    display: block;
}
body {
    line-height: 1;
}
ol, ul {
    list-style: none;
}
blockquote, q {
    quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
    content: '';
    content: none;
}
table {
    border-collapse: collapse;
    border-spacing: 0;
}

/* END CSS RESET */

:root {
    --black: #000000;
    --yellow: #F4D738;
    --orange: #FF7A5C;
    --gap: 16px;
    --stroke-weight: 2px;
}

body {
    width: calc(100vw - calc(var(--gap)*2));
    height: calc(100vh - calc(var(--gap)*2));
    overflow: hidden;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr 180px;
    grid-column-gap: 0px;
    grid-row-gap: 0px;
    grid-template-areas: 
    "content"
    "settings";
    font-family: 'Darker Grotesque', sans-serif;
    padding: var(--gap);
    background-color: var(--yellow);
}

h2 {
    font-weight: 700;
    font-size: 2.25em;
}

h3 {
    font-weight: 400;
    font-size: 1.5em;
}

h4 {
    font-weight: 700;
    font-size: 1.25em;
}

input[type="range"]{
    appearance: none;
    background: var(--black);
    height:2px;
    border-radius:2px;
    width:150px;
}

input[type="range"]::-webkit-slider-thumb{
    appearance: none;
    height:25px;
    width: 25px;
    background-color: var(--orange);
    border: 2px solid black;
    box-shadow:2px 2px 0px black;
    border-radius: 50%;
}

input[type="range"]::-moz-range-thumb{
    appearance: none;
    height:25px;
    width: 25px;
    background-color: var(--orange);
    border: 2px solid black;
    box-shadow:2px 2px 0px black;
    border-radius: 50%;
}

.switch{
    appearance: none;
    width:50px;
    background-color: var(--yellow);
    border: var(--stroke-weight) solid black;
    box-shadow:2px 2px 0px black;
    height: 30px;
    border-radius: 15px;
    cursor: pointer;
}

.switch::after{
    content: "";
    width: 22px;
    height:22px;
    background: var(--yellow);
    display: block;
    border-radius: 50%;
    transform: translate(3px,2px);
    transition: .3s transform,.3s box-shadow;
    border: var(--stroke-weight) solid black;
    box-sizing: border-box;
    box-shadow:1px 1px 0px black;
}

.switch:checked::after{
    transform: translate(21px,2px);
}

.switch:checked{
    background-color: var(--orange);
    transform: translate(0px,0px);
}

button, input[type="button"], input[type="submit"],input[type="reset"]{
    padding:var(--gap);
    padding-bottom: calc(var(--gap) + 2px);
    background: var(--yellow);
    border: var(--stroke-weight) solid var(--black);
    color:var(--black);
    margin:4px;
    border-radius:4px;
    box-shadow:2px 2px 0px black;
    cursor:pointer;
    font-family: 'Darker Grotesque', sans-serif;
    font-weight:400;
    font-size: 1.5em;
}

button:hover:not(:disabled), input[type="button"]:hover:not(:disabled), input[type="submit"]:hover:not(:disabled),input[type="reset"]:hover:not(:disabled){
    box-shadow:none;
    transform:translate(2px,2px);
    border: var(--stroke-weight) solid var(--black);
    background-color: var(--orange);
}

button:active, input[type="button"]:active, input[type="submit"]:active,input[type="reset"]:active{
    scale:0.98;
    filter: brightness(80%);
    background-color: var(--orange);
    border: var(--stroke-weight) solid var(--black);
}

.panel {
    border: var(--stroke-weight) solid var(--black);
    border-radius: 16px;
    background-color: inherit;
    filter: drop-shadow(2px 2px 0px var(--black)) drop-shadow(4px 4px 0px var(--black));
    padding: var(--gap);
}

.rule {
    width: 100%;
    height: 100%;
    background-color: var(--black);
}

#canvas-parent {
    grid-area: content;
    width: 100%;
    height: 100%;
}

#settings-panel {
    grid-area: settings;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 2.25em var(--stroke-weight) 1fr;
    grid-column-gap: 0px;
    grid-row-gap: var(--gap);
    grid-template-areas: 
    "title"
    "rule"
    "settings";
}

#settings-panel > .rule {
    grid-area: rule;
    width: calc(100% + calc(var(--gap)*2));
    transform: translateX(calc(var(--gap)*-1));
}

#settings-panel > h2 {
    grid-area: title;
}

#settings-group {
    grid-area: settings;
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: flex-start;
    align-items: stretch;
    gap: calc(var(--gap)*2);
}

#settings-group > .rule {
    width: var(--stroke-weight);
    height: calc(100% + calc(var(--gap)*2));
    transform: translateY(calc(calc(var(--gap)*-1) - calc(var(--stroke-weight) + 0.5px)));
}

.setting {
    position: relative;
    display: flex;
    flex-direction: column;
    flex-wrap: nowrap;
    justify-content: flex-start;
    align-items: stretch;
    gap: calc(var(--gap)*.75);
}

.setting-horizontal {
    position: relative;
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: flex-start;
    align-items: center;
    gap: calc(var(--gap)*.75);
    height: 100%;
}

.range-setting {
    display: grid;
    grid-template-columns: auto auto auto;
    grid-template-rows: 1fr;
    grid-column-gap: var(--gap);
    grid-row-gap: 0px;
    place-items: center;
}

#tip-selector {
    position: absolute;
    display: grid;
    place-items: center;
    top: var(--gap);
    right: var(--gap);
    min-width: 32px;
    min-height: 32px;
    background-color: white;
    border: var(--stroke-weight) solid var(--black);
    border-radius: 16px;
    font-weight: 700;
    font-size: 1.5em;
    color: var(--black);
    filter: drop-shadow(2px 2px 0px var(--black));
}

#tip-selector > .content-reset::before {
    content: url("data:image/svg+xml,%3Csvg xmlns= 'http://www.w3.org/2000/svg' viewBox= '0 0 56.05 62.2' %3E%3Cpath d= 'M23.83 4.25 1.89 54.27c-1.33 3.03.89 6.43 4.2 6.43h43.87c3.31 0 5.53-3.4 4.2-6.43L32.23 4.25c-1.6-3.66-6.8-3.66-8.4 0Z' style= 'fill:%23FF7A5C;stroke:%23000;stroke-miterlimit:10;stroke-width:3.33334px' /%3E%3C/svg%3E");
    position: absolute;
    bottom: 0px;
    right: 0px;
    width: 56px;
    height: 62px;
    transform-origin: center top;
    transform: scale(60%);
    animation-name: tipPointer;
    animation-duration: 1s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    z-index: 10;
    pointer-events: none;
}

@keyframes tipPointer {
    0%         {transform: scale(60%) rotate(30deg) translate(48px, 124px); animation-timing-function: cubic-bezier(.875,0,.625,1);}
    100%       {transform: scale(60%) rotate(30deg) translate(48px, 94px);}
}

#tip-selector > .content-reset {
    display: grid;
    place-items: center;
}

.content-reset {
    position: relative;
    width: 100%;
    height: 100%;
}

.tip-positioner {
    position: absolute;
    width: 100%;
    height: 100%;
}

.tip-box {
    position: relative;
    min-width: 200px;
    min-height: 32px;
    background-color: white;
    border: var(--stroke-weight) solid var(--black);
    border-radius: 16px;
    font-weight: 400;
    font-size: 1.125em;
    color: var(--black);
    filter: drop-shadow(2px 2px 0px var(--black));
    box-sizing: border-box;
    padding: calc(var(--gap)/2) var(--gap);
    width: auto;
    height: auto;
    transform: translateY(-95%);
    z-index: 50;
    opacity: 0%;
    transition: 0.15s ease;
}

/* TIPS */
#tip-drawing {
    position: absolute;
    top: 50%;
    left: 30%;
    transform: translate(-50%, -50%);
}